#!/usr/bin/env node
// overall plan: https://witeboard.com/23562970-023d-11e8-8a7d-a99df8aed6ff

var child_process = require('child_process')
var _ = require('underscore')
var parser = require('nomnom')

var findPackages = require('../lib/findPackages')
var utils = require('../lib/utils')


parser.command('scan')
  .option('repo', {
    help: 'repository URI'
  })
  .option('subdir', {
    help: 'subdirectory in repository'
  })
  .callback(function (opts) {
    findPackages.determine('.', []) // TODO: ignores dir
    .then(function( package_units ) {
      if(!package_units || _.isEmpty(package_units)) {
        console.log(JSON.stringify([], null, 2))
        return
      }
      // convert the findings from the utils to source unit
      var src_units = _.map(package_units, function(pkg) {
        return {
          // Still @TODO
          Name: pkg['id'],
          Type: 'CPANPackage',
          Version: pkg['version'], 
          Files: pkg['filePath'],
          Dir: '.',
          Dependencies: pkg['dependencies'],
          Ops: {depresolve: null, graph: null},
          Config: {}
        }
      })
      console.log(JSON.stringify(src_units, null, 2))
    }).then(function cleanup() {
      return new Promise(function(resolve, reject) {
        child_process.exec('rm -f Makefile Build scan_perl_prereqs_output.txt tempmakeoutput.txt tempbuildoutput.txt tempDepsList.txt', function(err, stdout){
          if (err||stdout){
            console.error(err||stdout)
            reject(err||stdout)
          } else {
            resolve(stdout)
          }
        })
      })
    }).catch( function (err) {
      console.error('Scanning for cpan modules failed: ', err.stack || err)
      process.exit(1)
    })
  })

parser.parse()
